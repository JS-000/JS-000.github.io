{"version":3,"file":"static/js/884.0eabb788.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nfunction useHttp(requestFunction) {\r\n    const [responseStatus, changeResponseStatus] = useState({\r\n        sending: false,\r\n        error: false,\r\n        success: false,\r\n        data: null\r\n    })\r\n\r\n    const sendRequest = useCallback(async (args) => {\r\n        changeResponseStatus(state => {return {\r\n            sending: true,\r\n            error: false,\r\n            success: false,\r\n            data: null\r\n        }})\r\n        try {\r\n            const data = await requestFunction(args)\r\n            changeResponseStatus(state => {return {\r\n                sending: false,\r\n                error: false,\r\n                success: true,\r\n                data\r\n            }})\r\n        } catch(err) {\r\n            changeResponseStatus(state => {return {\r\n                sending: false,\r\n                error: true,\r\n                success: false,\r\n                data: null\r\n            }})\r\n        }\r\n    }, [requestFunction])\r\n\r\n    return [\r\n        sendRequest,\r\n        responseStatus.sending,\r\n        responseStatus.error,\r\n        responseStatus.success,\r\n        responseStatus.data\r\n    ]\r\n}\r\n\r\nexport default useHttp","const FIREBASE_URL = 'https://quotes-335ea-default-rtdb.firebaseio.com'\r\n\r\nasync function getAllQuotes() {\r\n    const response = await fetch(`${FIREBASE_URL}/quotes.json`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot get quotes!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    let transformedQuotes = []\r\n    for(let key in data) {\r\n        transformedQuotes.push({...data[key], id: key})\r\n    }\r\n    return transformedQuotes\r\n}\r\n\r\nasync function getSingleQuote(quoteId) {\r\n    const response = await fetch(`${FIREBASE_URL}/quotes/${quoteId}.json`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot get quote!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nasync function addQuote(quote) {\r\n    const response = await fetch(`${FIREBASE_URL}/quotes.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(quote),\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n    })\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot add quote!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nasync function addComment(comment) {\r\n    const response = await fetch(`${FIREBASE_URL}/comments/${comment.quoteId}.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(comment),\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n    })\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot add comment!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nasync function getAllComments(quoteId) {\r\n    const response = await fetch(`${FIREBASE_URL}/comments/${quoteId}.json`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot load comments!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    let transformedComments = []\r\n    for(let key in data) {\r\n        transformedComments.push({...data[key], id: key})\r\n    }\r\n\r\n    return transformedComments\r\n}\r\n\r\nexport { getAllQuotes, getSingleQuote, addQuote, addComment, getAllComments }","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__KNLnn\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__OIegU\",\"loading\":\"QuoteForm_loading__YkA-l\",\"control\":\"QuoteForm_control__rrQOm\",\"actions\":\"QuoteForm_actions__FwnTk\"};","import { useRef } from 'react';\nimport { useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  const [isInFocus, setIsInFocus] = useState(false)\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    if(props.onAddQuote({ author: enteredAuthor, text: enteredText, publishedOn: Date.now() }))\n      props.redirect()\n  }\n\n  function focusChangeHandler() {\n    setIsInFocus(true)\n  }\n  function unFocus() {\n    setIsInFocus(false)\n  }\n\n  return (\n    <Card>\n      <Prompt when={isInFocus} message={location => 'Are you sure?'} />\n      <form onFocus={focusChangeHandler} className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author</label>\n          <input type='text' id='author' ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea id='text' rows='5' ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button className='btn' onClick={unFocus}>Add Quote</button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default QuoteForm;\n","import { Fragment } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport QuoteForm from '../components/quotes/QuoteForm'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\nimport { useCallback } from 'react';\r\n\r\nfunction NewQuote() {\r\n    const [sendRequest, sending, error, success, data] = useHttp(addQuote)\r\n    const history = useHistory()\r\n\r\n    \r\n    async function onAddQuote(data) {\r\n        try {\r\n            await sendRequest(data)\r\n            return true\r\n        } catch(err) {\r\n            return false\r\n        }\r\n    }\r\n    \r\n    const redirect = useCallback(() => {\r\n        if(success) {\r\n            history.replace('/quotes')\r\n        }\r\n    }, [history, success])\r\n\r\n    useEffect(() => {\r\n        redirect()\r\n    }, [data, redirect])\r\n    \r\n    return (\r\n        <Fragment>\r\n            <h1>New Quote</h1>\r\n            { sending && <LoadingSpinner /> }\r\n            { error && <h3 className='error'>Could not add quote. Please try again later.</h3> }\r\n            <QuoteForm onAddQuote={onAddQuote} redirect={redirect} />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default NewQuote"],"names":["requestFunction","useState","sending","error","success","data","responseStatus","changeResponseStatus","sendRequest","useCallback","args","state","FIREBASE_URL","getAllQuotes","fetch","response","ok","Error","json","key","transformedQuotes","push","id","getSingleQuote","quoteId","addQuote","quote","method","body","JSON","stringify","headers","addComment","comment","getAllComments","transformedComments","props","className","classes","children","authorInputRef","useRef","textInputRef","isInFocus","setIsInFocus","when","message","location","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","publishedOn","Date","now","redirect","isLoading","LoadingSpinner","htmlFor","type","ref","rows","onClick","useHttp","history","useHistory","replace","useEffect","Fragment"],"sourceRoot":""}