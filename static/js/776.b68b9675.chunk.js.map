{"version":3,"file":"static/js/776.b68b9675.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","pages/QuoteDetails.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nfunction useHttp(requestFunction) {\r\n    const [responseStatus, changeResponseStatus] = useState({\r\n        sending: false,\r\n        error: false,\r\n        success: false,\r\n        data: null\r\n    })\r\n\r\n    const sendRequest = useCallback(async (args) => {\r\n        changeResponseStatus(state => {return {\r\n            sending: true,\r\n            error: false,\r\n            success: false,\r\n            data: null\r\n        }})\r\n        try {\r\n            const data = await requestFunction(args)\r\n            changeResponseStatus(state => {return {\r\n                sending: false,\r\n                error: false,\r\n                success: true,\r\n                data\r\n            }})\r\n        } catch(err) {\r\n            changeResponseStatus(state => {return {\r\n                sending: false,\r\n                error: true,\r\n                success: false,\r\n                data: null\r\n            }})\r\n        }\r\n    }, [requestFunction])\r\n\r\n    return [\r\n        sendRequest,\r\n        responseStatus.sending,\r\n        responseStatus.error,\r\n        responseStatus.success,\r\n        responseStatus.data\r\n    ]\r\n}\r\n\r\nexport default useHttp","const FIREBASE_URL = 'https://quotes-335ea-default-rtdb.firebaseio.com'\r\n\r\nasync function getAllQuotes() {\r\n    const response = await fetch(`${FIREBASE_URL}/quotes.json`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot get quotes!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    let transformedQuotes = []\r\n    for(let key in data) {\r\n        transformedQuotes.push({...data[key], id: key})\r\n    }\r\n    return transformedQuotes\r\n}\r\n\r\nasync function getSingleQuote(quoteId) {\r\n    const response = await fetch(`${FIREBASE_URL}/quotes/${quoteId}.json`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot get quote!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nasync function addQuote(quote) {\r\n    const response = await fetch(`${FIREBASE_URL}/quotes.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(quote),\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n    })\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot add quote!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nasync function addComment(comment) {\r\n    const response = await fetch(`${FIREBASE_URL}/comments/${comment.quoteId}.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(comment),\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n    })\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot add comment!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nasync function getAllComments(quoteId) {\r\n    const response = await fetch(`${FIREBASE_URL}/comments/${quoteId}.json`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot load comments!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    let transformedComments = []\r\n    for(let key in data) {\r\n        transformedComments.push({...data[key], id: key})\r\n    }\r\n\r\n    return transformedComments\r\n}\r\n\r\nexport { getAllQuotes, getSingleQuote, addQuote, addComment, getAllComments }","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__bGxcL\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__BGBDU\",\"loading\":\"NewCommentForm_loading__RCKTW\",\"control\":\"NewCommentForm_control__zcmbu\",\"actions\":\"NewCommentForm_actions__ME663\"};","import { useRef } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { Fragment } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\nimport { Redirect } from 'react-router-dom';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const routeMatch = useRouteMatch()\n  const [sendRequest, sending, error, success] = useHttp(addComment)\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    // optional: Could validate here\n    sendRequest({\n      text: commentTextRef.current.value,\n      quoteId: routeMatch.url.split('/')[2]\n    })\n\n    // send comment to server\n  };\n\n  return (\n    <Fragment>\n      <form className={classes.form} onSubmit={submitFormHandler}>\n        <div className={classes.control} onSubmit={submitFormHandler}>\n          <label htmlFor='comment'>Your Comment</label>\n          <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button className='btn'>Add Comment</button>\n        </div>\n      </form>\n      { sending && <LoadingSpinner /> }\n      { success && <Redirect to={routeMatch.url} /> }\n      { error && <h3 className='error'>Failed to add comment!</h3> }\n    </Fragment>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState } from 'react';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm />}\n      <p>Comments...</p>\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__IYyqg\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__FB82z\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__lCAFO\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { Fragment } from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport { useRouteMatch } from 'react-router-dom'\r\nimport { Link } from 'react-router-dom'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useEffect } from 'react'\r\nimport Comments from '../components/comments/Comments'\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\nimport useHttp from '../hooks/use-http'\r\nimport { getAllComments, getSingleQuote } from '../lib/api'\r\nimport CommentsList from '../components/comments/CommentsList'\r\n\r\nfunction QuoteDetails() {\r\n    const params = useParams()\r\n    // const [quote] = TestQuotes.filter(quote => quote.id === params.quoteId)\r\n    const [sendRequest, sending, error, success, data] = useHttp(getSingleQuote)\r\n    const [commentSendRequest, sendingComment, errorComment, successComment, commentData] = useHttp(getAllComments)\r\n    const routeMatch = useRouteMatch()\r\n\r\n    useEffect(() => {\r\n        async function wrapperSendRequest() {\r\n            await sendRequest(params.quoteId)\r\n        }\r\n        wrapperSendRequest()\r\n        // Suppresses missing dependency warning\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [sendRequest, commentSendRequest])\r\n\r\n    useEffect(() => {\r\n        async function wrapperSendRequest() {\r\n            await commentSendRequest(params.quoteId)\r\n        }\r\n        wrapperSendRequest()\r\n    }, [commentSendRequest, params])\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1>Quote Detail</h1>\r\n            { sending && <LoadingSpinner /> }\r\n            { error && <h3 className='error'>Could not find quote!</h3> }\r\n            { success && <Fragment>\r\n                <HighlightedQuote id={data.id} text={data.text} author={data.author} />\r\n                <Route path={`${routeMatch.url}`} exact>\r\n                    <Link className='btn--flat' to={`${routeMatch.url}/comments`}>\r\n                        Load comments...\r\n                    </Link>\r\n                </Route>\r\n                <Route path={`${routeMatch.url}/comments`}>\r\n                    <Comments />\r\n                    { successComment && <CommentsList comments={commentData} /> }\r\n                    { sendingComment && <LoadingSpinner /> }\r\n                    { errorComment && <h3 className='error'>Error loading comments!</h3> }\r\n                    <Link className='btn--flat' to={`${routeMatch.url}`}>\r\n                        Back\r\n                    </Link>\r\n                </Route>\r\n            </Fragment> }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default QuoteDetails"],"names":["requestFunction","useState","sending","error","success","data","responseStatus","changeResponseStatus","sendRequest","useCallback","args","state","FIREBASE_URL","getAllQuotes","fetch","response","ok","Error","json","key","transformedQuotes","push","id","getSingleQuote","quoteId","addQuote","quote","method","body","JSON","stringify","headers","addComment","comment","getAllComments","transformedComments","props","commentTextRef","useRef","routeMatch","useRouteMatch","useHttp","submitFormHandler","event","preventDefault","text","current","value","url","split","Fragment","className","classes","onSubmit","htmlFor","rows","ref","LoadingSpinner","to","isAddingComment","setIsAddingComment","onClick","author","comments","map","params","useParams","commentSendRequest","sendingComment","errorComment","successComment","commentData","useEffect","wrapperSendRequest","path","exact"],"sourceRoot":""}