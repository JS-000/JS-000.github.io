{"version":3,"file":"static/js/808.ff647a77.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js","webpack://react-complete-guide/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://react-complete-guide/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","pages/AllQuotes.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nfunction useHttp(requestFunction) {\r\n    const [responseStatus, changeResponseStatus] = useState({\r\n        sending: false,\r\n        error: false,\r\n        success: false,\r\n        data: null\r\n    })\r\n\r\n    const sendRequest = useCallback(async (args) => {\r\n        changeResponseStatus(state => {return {\r\n            sending: true,\r\n            error: false,\r\n            success: false,\r\n            data: null\r\n        }})\r\n        try {\r\n            const data = await requestFunction(args)\r\n            changeResponseStatus(state => {return {\r\n                sending: false,\r\n                error: false,\r\n                success: true,\r\n                data\r\n            }})\r\n        } catch(err) {\r\n            changeResponseStatus(state => {return {\r\n                sending: false,\r\n                error: true,\r\n                success: false,\r\n                data: null\r\n            }})\r\n        }\r\n    }, [requestFunction])\r\n\r\n    return [\r\n        sendRequest,\r\n        responseStatus.sending,\r\n        responseStatus.error,\r\n        responseStatus.success,\r\n        responseStatus.data\r\n    ]\r\n}\r\n\r\nexport default useHttp","const FIREBASE_URL = 'https://quotes-335ea-default-rtdb.firebaseio.com'\r\n\r\nasync function getAllQuotes() {\r\n    const response = await fetch(`${FIREBASE_URL}/quotes.json`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot get quotes!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    let transformedQuotes = []\r\n    for(let key in data) {\r\n        transformedQuotes.push({...data[key], id: key})\r\n    }\r\n    return transformedQuotes\r\n}\r\n\r\nasync function getSingleQuote(quoteId) {\r\n    const response = await fetch(`${FIREBASE_URL}/quotes/${quoteId}.json`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot get quote!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nasync function addQuote(quote) {\r\n    const response = await fetch(`${FIREBASE_URL}/quotes.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(quote),\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n    })\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot add quote!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nasync function addComment(comment) {\r\n    const response = await fetch(`${FIREBASE_URL}/comments/${comment.quoteId}.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(comment),\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n    })\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot add comment!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nasync function getAllComments(quoteId) {\r\n    const response = await fetch(`${FIREBASE_URL}/comments/${quoteId}.json`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Cannot load comments!')\r\n    }\r\n\r\n    const data = await response.json()\r\n    let transformedComments = []\r\n    for(let key in data) {\r\n        transformedComments.push({...data[key], id: key})\r\n    }\r\n\r\n    return transformedComments\r\n}\r\n\r\nexport { getAllQuotes, getSingleQuote, addQuote, addComment, getAllComments }","// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__sZB4D\"};","import classes from './NoQuotesFound.module.css';\nimport { Link } from 'react-router-dom';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__UhBy0\"};","import classes from './QuoteItem.module.css';\nimport { Link } from 'react-router-dom';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__Fxtp8\",\"sorting\":\"QuoteList_sorting__lB+-7\"};","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst QuoteList = (props) => {\n  const location = useLocation()\n  const history = useHistory()\n\n\n  const queryParams = new URLSearchParams(location.search)  //URLSear.. is browser implemented class, location.search holds query \n  //string like ?sort=asc, this is changed to js object by URLSear.. class. It returns a map not an object\n\n  const sortAscending = queryParams.get('sort') === 'asc' //IMP: We need to use '.get' as queryParams is not an object it is a map\n  // const map1 = new Map()\n  // console.log(typeof map1);\n  console.log(typeof queryParams) //returns object even if data type is 'map'\n  \n  function changeSortingHandler() {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${sortAscending ? 'desc' : 'asc'}`\n    })\n    // history.push(`/quotes?sort=${sortAscending ? 'desc' : 'asc'}`)  //changes state, that is why page is revaluated\n  }\n\n  props.quotes.sort((q1, q2) => {\n    if(sortAscending){\n      return q1.publishedOn < q2.publishedOn ? 1 : -1\n    }\n    else {\n      return q1.publishedOn > q2.publishedOn ? 1 : -1\n    }\n  })\n\n  return (\n    <Fragment>\n    <div className={classes.sorting}>\n      <button onClick={changeSortingHandler}>Sort {sortAscending ? 'Ascending' : 'Descending'}</button>\n    </div>\n      <ul className={classes.list}>\n        {props.quotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Fragment } from 'react'\r\nimport { useEffect } from 'react'\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound'\r\nimport QuoteList from '../components/quotes/QuoteList'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\nimport useHttp from '../hooks/use-http'\r\nimport { getAllQuotes } from '../lib/api'\r\n\r\nfunction AllQuotes() {\r\n    const [sendRequest, sending, error, success, data] = useHttp(getAllQuotes)\r\n\r\n    useEffect(() => {\r\n        async function wrapperSendRequest() {\r\n            await sendRequest()\r\n        }\r\n\r\n        wrapperSendRequest()\r\n    }, [sendRequest])\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1>Quote list</h1>\r\n            { sending && <LoadingSpinner /> }\r\n            { error && <h3 className='error'>Failed to load quotes!</h3> }\r\n            { success ? data.length <= 0 ? <NoQuotesFound /> : <QuoteList quotes={data} /> : ''}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AllQuotes"],"names":["requestFunction","useState","sending","error","success","data","responseStatus","changeResponseStatus","sendRequest","useCallback","args","state","FIREBASE_URL","getAllQuotes","fetch","response","ok","Error","json","key","transformedQuotes","push","id","getSingleQuote","quoteId","addQuote","quote","method","body","JSON","stringify","headers","addComment","comment","getAllComments","transformedComments","className","classes","to","props","text","author","location","useLocation","history","useHistory","queryParams","URLSearchParams","search","sortAscending","get","console","log","quotes","sort","q1","q2","publishedOn","Fragment","onClick","pathname","map","useHttp","useEffect","wrapperSendRequest","LoadingSpinner","length"],"sourceRoot":""}